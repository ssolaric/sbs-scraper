/// <reference lib="dom" />
import * as cheerio from "cheerio";

async function requestExchangeRates(date: string) {
  const requestBody = `ctl00%24MainScriptManager=ctl00%24cphContent%24updConsulta%7Cctl00%24cphContent%24btnConsultar&ctl00_MainScriptManager_TSM=%3B%3BSystem.Web.Extensions%2C%20Version%3D4.0.0.0%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3D31bf3856ad364e35%3Aen-US%3Ab7585254-495e-4311-9545-1f910247aca5%3Aea597d4b%3Ab25378d2%3BTelerik.Web.UI%3Aen-US%3Aab312d5a-8d8b-4310-a879-b25aeb34b5c7%3A16e4e7cd%3Af7645509%3A22a6274a%3A88144a7a%3A8674cba1%3A7c926187%3Ab7778d6c%3Ac08e9f8a%3A59462f1%3Aa51ee93e%3A58366029%3A24ee1bba%3Ae330518b%3A2003d0b8%3Ac128760b%3A1e771326%3Ac8618e41%3Ae4f8f289%3A1a73651d%3A333f8d94%3B&ctl00%24cphContent%24rdpDate=${date}&ctl00%24cphContent%24rdpDate%24dateInput=14%2F02%2F2023&ctl00_cphContent_rdpDate_dateInput_ClientState=%7B%22enabled%22%3Atrue%2C%22emptyMessage%22%3A%22%22%2C%22validationText%22%3A%22${date}-00-00-00%22%2C%22valueAsString%22%3A%22${date}-00-00-00%22%2C%22minDateStr%22%3A%221000-01-01-00-00-00%22%2C%22maxDateStr%22%3A%222023-02-21-00-00-00%22%2C%22lastSetTextBoxValue%22%3A%2214%2F02%2F2023%22%7D&ctl00_cphContent_rdpDate_calendar_SD=%5B%5B2023%2C2%2C14%5D%5D&ctl00_cphContent_rdpDate_calendar_AD=%5B%5B1000%2C1%2C1%5D%2C%5B2023%2C2%2C21%5D%2C%5B2023%2C2%2C21%5D%5D&ctl00_cphContent_rdpDate_ClientState=%7B%22minDateStr%22%3A%221000-01-01-00-00-00%22%2C%22maxDateStr%22%3A%222023-02-21-00-00-00%22%7D&ctl00_cphContent_rgTipoCambio_rghcMenu_ClientState=&ctl00_cphContent_rgTipoCambio_ClientState=&__EVENTTARGET=&__EVENTARGUMENT=&__VIEWSTATE=%&__VIEWSTATEGENERATOR=8A5C9447&__EVENTVALIDATION=%2FwEdAAflMKsyTyib%2BzGxlyHjJUYwlawXGEyscjwHM2iJ%2B8drUdz81GR1o7NJCyAXkQgagG3oPDMR8cgDMq3ctkhYgDUUYOXpthTpsiyvd3VVRVRUqxG0QhVyn8o%2Fs84qwVK0NIQ84ZbkD733a15gVl%2FnxA8E7%2FrcWEaKCaQK87VkhYd1%2B1ymProTNQ5y3k2mCQ4n0NE%3D&__ASYNCPOST=true&ctl00%24cphContent%24btnConsultar=Consultar`;
  const response = await fetch(
    "https://www.sbs.gob.pe/app/pp/SISTIP_PORTAL/Paginas/Publicacion/TipoCambioContable.aspx",
    {
      headers: {
        "User-Agent":
          "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0",
        Accept: "*/*",
        "Accept-Language": "en-US,en;q=0.5",
        "X-Requested-With": "XMLHttpRequest",
        "X-MicrosoftAjax": "Delta=true",
        "Cache-Control": "no-cache",
        "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "same-origin",
        Pragma: "no-cache",
      },
      referrer:
        "https://www.sbs.gob.pe/app/pp/SISTIP_PORTAL/Paginas/Publicacion/TipoCambioContable.aspx",
      body: requestBody,
      method: "POST",
    }
  );
  const text = await response.text();
  return text;
}

function parseResponse(responseText: string) {
  const ind1 = responseText.indexOf(`<table class="rgMasterTable"`);
  const ind2 = responseText.indexOf(`</table>`, ind1);
  const html = responseText.slice(ind1, ind2 + 8);
  const $ = cheerio.load(html);
  const usd = $("thead").children().first().children();
  if ($(usd[0]).text() === "") {
    return [];
  }
  const currencies = [
    {
      region: $(usd[0]).text(),
      name: $(usd[1]).text(),
      rate: parseFloat($(usd[2]).text()),
    },
  ];
  const tbody = $("tbody").children();
  for (const currency of tbody.toArray()) {
    const parts = $(currency).children();
    currencies.push({
      region: $(parts[0]).text(),
      name: $(parts[1]).text(),
      rate: parseFloat($(parts[2]).text()),
    });
  }
  return currencies;
}

async function main() {
  const argv = process.argv.slice(2);
  // if (argv.length !== 1) {
  //   console.error('A date in the format YYYY-MM-DD must be provided.');
  //   process.exit(1);
  // }
  let date;
  if (argv.length === 0) {
    date = new Date().toLocaleDateString("fr-CA");
  } else {
    date = argv[0];
  }
  if (!date.match(/\d{4}-\d{2}-\d{2}/)) {
    console.error("A date in the format YYYY-MM-DD must be provided.");
    process.exit(1);
  }
  const responseText = await requestExchangeRates(date);
  const currencies = parseResponse(responseText);
  console.error(currencies);
  if (currencies.length === 0) {
    console.log("Exchange rate was not available on this date.");
  } else {
    console.log(JSON.stringify(currencies));
  }
}

main();
